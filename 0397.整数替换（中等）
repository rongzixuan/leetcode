"""
给定一个正整数 n ，你可以做如下操作：

如果 n 是偶数，则用 n / 2替换 n 。
如果 n 是奇数，则可以用 n + 1或n - 1替换 n 。
n 变为 1 所需的最小替换次数是多少？


示例 1：
输入：n = 8
输出：3
解释：8 -> 4 -> 2 -> 1

示例 2：
输入：n = 7
输出：4
解释：7 -> 8 -> 4 -> 2 -> 1
或 7 -> 6 -> 3 -> 2 -> 1

示例 3：
输入：n = 4
输出：2
 

提示：

1 <= n <= 2^31 - 1

"""

class Solution:
    @ cache
    def integerReplacement(self, n: int) -> int:


        # 方法一：贪心
        # 时间复杂度：O(logn)
        # 空间复杂度：O(1)
        """res = 0
        while n > 1:
            #print(n)
            if n == 3:
                return res + 2
            if n % 2 == 0:
                n //= 2
            else:
                if (n+1) % 4 == 0:
                    n += 1
                else:
                    n -= 1
            res += 1

        return res"""


        # 方法二：递归
        # 时间复杂度：O(1.618 ^ logn)
        # 空间复杂度：O(logn)
        #print(n)
        if n == 1:
            return 0
        elif n % 2 == 0:
            return 1 + self.integerReplacement(n // 2)
        else:
            return 2 + min(self.integerReplacement((n+1) // 2), self.integerReplacement((n-1) // 2))


        # 方法三：记忆化搜索
        # 时间复杂度：O(logn)
        # 空间复杂度：O(logn)
        #print(n)
        if n == 1:
            return 0
        elif n % 2 == 0:
            return 1 + self.integerReplacement(n // 2)
        else:
            return 2 + min(self.integerReplacement((n+1) // 2), self.integerReplacement((n-1) // 2))




