"""
实现一个 MapSum 类，支持两个方法，insert 和 sum：

MapSum() 初始化 MapSum 对象
void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。
int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。
 

示例：

输入：
["MapSum", "insert", "sum", "insert", "sum"]
[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
输出：
[null, null, 3, null, 5]

解释：
MapSum mapSum = new MapSum();
mapSum.insert("apple", 3);  
mapSum.sum("ap");           // return 3 (apple = 3)
mapSum.insert("app", 2);    
mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)
 

提示：

1 <= key.length, prefix.length <= 50
key 和 prefix 仅由小写英文字母组成
1 <= val <= 1000
最多调用 50 次 insert 和 sum

"""

# 方法一：暴力法
"""class MapSum:
    def __init__(self):
        self.map = {}

    def insert(self, key: str, val: int) -> None:
        self.map[key] = val

    def sum(self, prefix: str) -> int:
        res = 0
        for k, v in self.map.items():
            if k.startswith(prefix):
                res += v
        return res"""


# 方法二：前缀哈希映射
"""class MapSum:
    def __init__(self):
        self.map = {}
        self.prefixmap = {}

    def insert(self, key: str, val: int) -> None:
        delta = val
        if key in self.map:
            delta -= self.map[key]
        self.map[key] = val
        for i in range(len(key)):
            tmp = key[0: i+1]
            if tmp in self.prefixmap:
                self.prefixmap[tmp] += delta
            else:
                self.prefixmap[tmp] = delta


    def sum(self, prefix: str) -> int:
        if prefix in self.prefixmap:
            return self.prefixmap[prefix]
        else:
            return 0"""


# 方法三：字典树
class TrieNode:
    def __init__(self):
        self.val = 0
        self.children = [None for _ in range(26)]

class MapSum:
    def __init__(self):
        self.map = {}
        self.root = TrieNode()

    def insert(self, key: str, val: int) -> None:
        delta = val
        if key in self.map:
            delta -= self.map[key]
        self.map[key] = val
        node = self.root
        for ch in key:
            if node.children[ord(ch) - ord('a')] is not None:
                node.children[ord(ch) - ord('a')].val += delta
            else:
                node.children[ord(ch) - ord('a')] = TrieNode()
                node.children[ord(ch) - ord('a')].val = delta
            node = node.children[ord(ch) - ord('a')]

    def sum(self, prefix: str) -> int:
        node = self.root
        for ch in prefix:
            if node.children[ord(ch) - ord('a')] is None:
                return 0
            else:
                node = node.children[ord(ch) - ord('a')]
        return node.val


# Your MapSum object will be instantiated and called as such:
# obj = MapSum()
# obj.insert(key,val)
# param_2 = obj.sum(prefix)
