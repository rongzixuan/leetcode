"""
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

'A' -> 1
'B' -> 2
...
'Z' -> 26
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

题目数据保证答案肯定是一个 32 位 的整数。

"""

class Solution:
    def numDecodings(self, s: str) -> int:


        # 方法一：动态规划
        # 时间复杂度：O(n)
        # 空间复杂度：O(n)
        n = len(s)
        if s[0] == '0':
            return 0
        elif n == 1:
            return 1

        dp = [0] * (n+1)
        dp[1] = 1
        dp[0] = 1

        for i in range(2, n+1):
            #if i >= 3:
            # 加两个字符
            if int(s[i-2] + s[i-1]) == 0:  # 连续两个0无法分割
                return 0

            if s[i-2] != '0' and int(s[i-2] + s[i-1]) <= 26:
                dp[i] += dp[i-2]
            """elif int(s[i-2] + s[i-1]) > 26 and int(s[i-1]) == 0:  # 如40
                pass
            elif int(s[i-2] + s[i-1]) > 26:  # 如48
                dp[i] += dp[i-1]           
            elif int(s[i-2] + s[i-1]) == 10 or int(s[i-2] + s[i-1]) == 20:  # 10、20
                pass
            elif int(s[i-2]) == 0:  # 如06
                dp[i] += dp[i-1]
            else:   # 如16
                dp[i] += dp[i-2] + 1"""

            if s[i-1] != '0':
                dp[i] += dp[i-1]


        #print(dp)
        return dp[n]
            




