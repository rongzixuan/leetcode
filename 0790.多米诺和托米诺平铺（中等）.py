"""
有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 "L" 的托米诺形。两种形状都可以旋转。
给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 109 + 7 取模 的值。

平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。

 
示例 1:
输入: n = 3
输出: 5
解释: 五种不同的方法如上所示。

示例 2:
输入: n = 1
输出: 1
 
提示：
1 <= n <= 1000

"""

class Solution:
    def numTilings(self, n: int) -> int:


        # 方法一：动态规划
        # 时间复杂度：O(n)
        # 空间复杂度：O(n)
        # 状态 0：上下都有，1：上有下无， 2：下有上无, 3：上下都无
        MOD = 10 ** 9 + 7
        dp = [[0] * 4 for _ in range(n + 1)]       
        dp[0][0] = 1
        #dp[0][3] = 1
        #print(dp)
        for i in range(1, n + 1):
            dp[i][0] += dp[i - 1][0]
            dp[i][0] += dp[i - 1][1]
            dp[i][0] += dp[i - 1][2]
            dp[i][0] += dp[i - 1][3]
            #dp[i][0] += dp[i - 2][0]     

            dp[i][1] += dp[i - 1][3]
            dp[i][1] += dp[i - 1][2]

            dp[i][2] += dp[i - 1][3]
            dp[i][2] += dp[i - 1][1]

            dp[i][3] = dp[i - 1][0]
        #print(dp)
        return dp[n][0] % MOD


